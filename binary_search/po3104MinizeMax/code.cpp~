/*
	My first idea is to use greedy method, which is to use machine on the most wet clothes, and u need to maintian a self-blanced binary search tree, cause u need to find, revise the data all the time. It cost so much.
	Second idea is to use the sum and determine every minute how much water can be removed, but it tend to be anoter version of the first idea.
	
	The correct idea is to test whether a time is ok. Suppost u get T minute, and you can you the machine every minute, so if the time for every clothes is enough, then it is ok.
	Use a binary search method, and the test method is to determine the least minute each clothes need to use, then sum thost machine time.
	See the code!

*/
#include <iostream>
#include <cmath>
#include <cstring>
#include <cstdio>
#include <algorithm>
#include <cctype>
#include <queue>
#include <stack>
#include <sstream>
#define MAXN 100005
using namespace std;
int k,n;
int a[MAXN];

int C(int t){
	int sum=0;
	for(int i=0;i<n;i++){

		if(a[i]>t){
			sum+=(a[i]-t)/(k-1)+((a[i]-t)%(k-1)==0?0:1);
			if(sum>t) return 0;
			} 
	}
	return 1;
}


int  main(){

	freopen("in.txt","r",stdin);
	while(cin >> n){
		int maxi=0;
		for(int i=0;i<n;i++) {scanf("%d",a+i);maxi=max(maxi,a[i]);}
		scanf("%d",&k);
		if(k==1) {printf("%d\n",maxi);continue;}

		int up,low,mid,last;up=maxi;low=1;

		while(low <= up){
			mid=(low+up)>>1;
			if(C(mid)){last=mid;up=mid-1;}
			else {low=mid+1;}

		}
	
		
		printf("%d\n",last);
		
	}

	return 0;}
